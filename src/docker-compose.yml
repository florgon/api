version: "3"
# !TODO!: Database config should be: "postgres" - "-c" "-config-file=/etc/postgresql/postgresql.conf" with volume on Docker.
# !TODO!: Research database poller workflow.

volumes:
  db:
    driver: local
  worker:
    driver: local
  cache:
    driver: local

services:
  database:
    image: postgres:14-alpine
    hostname: florgon-api
    restart: unless-stopped
    volumes:
      - ../db:/var/lib/postgresql/data
    env_file:
      - ./docker/configs/.database.env
    networks:
      - florgon-api
    command:
      - "postgres"
      - "-c" # Max connection limit for database.
      - "max_connections=1000" # SHOW max_connections;
      - "-c" # Buffer size for database bufferization.
      - "shared_buffers=128MB" # SHOW shared_buffers;

  database-poller:
    image: edoburu/pgbouncer
    restart: unless-stopped
    env_file:
      - ./docker/configs/.database.env
    depends_on:
      - database
    networks:
      - florgon-api

  cache:
    # TODO: fix vm.overcommit_memory warning.
    image: redis:7-alpine
    hostname: florgon-api
    restart: unless-stopped
    command: redis-server
    volumes:
      - ../cache:/data
    networks:
      - florgon-api

  worker:
    hostname: florgon-api
    restart: always
    env_file:
      - ./app/.env
    build:
      context: ./
      dockerfile: $PWD/Dockerfile
    volumes:
      - ../worker:/srv/worker
      - ./api:/srv/api
    command: celery --app=app.worker.worker worker --loglevel=info -B -s /srv/worker/celerybeat-schedule
    # TODO: --uid=nobody --gid=nogroup
    depends_on:
      - cache
      - server
    links:
      - database
      - cache
    networks:
      - florgon-api

  server:
    hostname: florgon-api
    restart: unless-stopped
    env_file:
      - ./app/.env
    volumes:
      - ./api:/srv/api
    ports:
      - "${COMPOSE_EXPOSED_PORT}:80"
    depends_on:
      - database
      - cache
    links:
      - database
      - cache
    networks:
      - florgon-api
    build:
      context: ./
      dockerfile: $PWD/Dockerfile
    command: gunicorn app.app:app -c gunicorn.conf.py

networks:
  florgon-api:
    name: florgon-api
